tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ec3_custom_types: https://raw.githubusercontent.com/grycap/ec3/tosca/tosca/custom_types.yaml

description: Template for launching an OSCAR Virtual Cluster

topology_template:
  inputs:
    fe_cpus:
      type: integer
      default: 2
    fe_mem:
      type: scalar-unit.size
      default: 4 GB
  
    wn_num:
      type: integer
      default: 1
    wn_cpus:
      type: integer
      default: 2
    wn_mem:
      type: scalar-unit.size
      default: 4 GB
    wn_sgx:
      type: boolean
      default: False
    wn_preemtible_instance:
      type: boolean
      default: False
    storage_size:
      type: string
      default: 50 GB
  
    os_type:
      type: string
      default: linux
    os_distribution:
      type: string
      default: ubuntu
    os_version:
      type: string
      default: "20.04"
    os_image:
      type: string
      default: ""

    admin_token:
      type: string
      default: not_very_secret_token
    oscar_password:
      type: string
      default: oscar123
    minio_password:
      type: string
      default: minio123
    cert_user_email:
      type: string
      default: "jhondoe@server.com"

    cluster_name:
      type: string
      default: oscar
    domain_name:
      type: string
      default: im.grycap.net
  
  node_templates:

    dns_reg_console_minio:
      type: tosca.nodes.ec3.DNSRegistry
      properties:
        record_name: { concat: [ "console.minio.", get_input: cluster_name ] }
        domain_name: { get_input: domain_name }
        dns_service_credentials:
          token_type: password
          token: "AK:SK"
      requirements:
        - host: front

    dns_reg_minio:
      type: tosca.nodes.ec3.DNSRegistry
      properties:
        record_name: { concat: [ "minio.", get_input: cluster_name ] }
        domain_name: { get_input: domain_name }
        dns_service_credentials:
          token_type: password
          token: "AK:SK"
      requirements:
        - host: front

    dns_reg:
      type: tosca.nodes.ec3.DNSRegistry
      properties:
        record_name: { get_input: cluster_name }
        domain_name: { get_input: domain_name }
        dns_service_credentials:
          token_type: password
          token: "AK:SK"
      requirements:
        - host: front

    oscar:
      type: tosca.nodes.indigo.OSCAR
      properties:
        minio_secretkey:  { get_input: minio_password }
        password: { get_input: oscar_password }
        dns_host: { concat: [ get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
        minio_dns_host: { concat: [ 'minio.', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
        minio_dns_host_console: { concat: [ 'console.minio.', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
      capabilities:
        endpoint:
          properties:
            ports:
              http_port:
                protocol: tcp
                source: 80
              https_port:
                protocol: tcp
                source: 443
              minio_port:
                protocol: tcp
                source: 30300
      requirements:
        - host: lrms_front_end

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            port: 30443
            protocol: tcp
      properties:
        admin_username:  kubeuser
        admin_token: { get_input: admin_token }
        install_kubeapps:  false
        install_metrics: true
        install_nfs_client: true
        install_ingress: true
        version: 1.23.6
        cert_manager: true
        cert_user_email: { get_input: cert_user_email }
        public_dns_name: { concat: [ get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name] ] }
        cert_manager_challenge: dns01
        cert_manager_challenge_dns01_domain: { get_property: [dns_reg, domain_name] }
        cert_manager_challenge_dns01_ak: AK
        cert_manager_challenge_dns01_sk: SK
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
        os:
          properties:
            distribution: { get_input: os_distribution }
            type: { get_input: os_type }
            version:  { get_input: os_version }
            image: { get_input: os_image }
      requirements:
        - local_storage:
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /pv
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: 1.23.6
      requirements:
        - host: wn

    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count:  { get_input: wn_num }
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
            sgx: { get_input: wn_sgx }
            preemtible_instance: { get_input: wn_preemtible_instance }
        os:
          properties:
            distribution: { get_input: os_distribution }
            type: { get_input: os_type }
            version:  { get_input: os_version }
            image: { get_input: os_image }

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name], '/dashboard/' ] }
    oscarui_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg, record_name], '.', get_property: [dns_reg, domain_name], '/' ] }
    minio_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg_minio, record_name], '.', get_property: [dns_reg_minio, domain_name], '/' ] }
    console_minio_endpoint:
      value: { concat: [ 'https://', get_property: [dns_reg_console_minio, record_name], '.', get_property: [dns_reg_console_minio, domain_name], '/' ] }